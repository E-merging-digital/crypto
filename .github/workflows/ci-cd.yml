name: CI/CD Drupal 11 â€“ crypto

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash

env:
  COMPOSER_PROCESS_TIMEOUT: 1200
  COMPOSER_MEMORY_LIMIT: -1

jobs:
  phpunit-and-lint:
    name: PhpUnit & lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Mark workspace safe for git
        run: git config --global --add safe.directory "${{ github.workspace }}"

      - name: Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: none
          extensions: xml, gd, mysqli, zip, gmp
          tools: composer

      - name: Show loaded PHP modules (debug)
        run: php -m | head -n 200

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install project dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: Prepare Drupal test output directories
        run: |
          mkdir -p web/sites/simpletest/browser_output
          chmod -R 775 web/sites/simpletest

      - name: Ensure run-tests.sh is executable
        run: test -f scripts/run-tests.sh && chmod +x scripts/run-tests.sh || true

      - name: Add vendor/bin to PATH
        run: echo "${GITHUB_WORKSPACE}/vendor/bin" >> "$GITHUB_PATH"

      - name: Run GrumPHP (lint + static analysis + PHPUnit)
        env:
          SIMPLETEST_BASE_URL: http://127.0.0.1:8080
          SIMPLETEST_DB: sqlite://localhost/web/sites/default/files/.ht.sqlite
          BROWSERTEST_OUTPUT_DIRECTORY: web/sites/simpletest/browser_output
        run: grumphp run

  behat:
    name: Behat end-to-end tests
    runs-on: ubuntu-latest
    needs: phpunit-and-lint

    container:
      image: ghcr.io/e-merging-digital/crypto:php8.3-gd-gmp-git
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    services:
      web:
        image: php:8.3-apache
        env:
          APACHE_DOCUMENT_ROOT: /var/www/html/web
        options: >-
          -v ${{ github.workspace }}:/var/www/html:rw
          --health-cmd="bash -lc 'test -f /var/www/html/web/index.php || exit 1'"
          --health-interval=5s --health-timeout=5s --health-retries=30
      selenium:
        image: selenium/standalone-chrome:latest
        # Publication de port non nÃ©cessaire pour la com inter-services, mais inoffensif
        ports:
          - 4444:4444
        options: >-
          --shm-size="2g"
          --health-cmd="curl -s http://localhost:4444/status | grep -q 'ready'"
          --health-interval=5s --health-timeout=5s --health-retries=30
          -e SE_NODE_MAX_SESSIONS=1
          -e SE_NODE_SESSION_TIMEOUT=300

    steps:
      - uses: actions/checkout@v4

      - name: Mark workspace safe
        run: git config --global --add safe.directory "${{ github.workspace }}"

      - name: Sanity check shell & PATH
        run: |
          command -v bash
          echo "PATH=$PATH"

      - name: Cache Composer (in container)
        uses: actions/cache@v4
        with:
          path: |
            /github/home/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dev dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: Add vendor/bin to PATH
        run: echo "${GITHUB_WORKSPACE}/vendor/bin" >> "$GITHUB_PATH"

      # curl/jq ne sont pas garantis dans l'image du job : on les installe (Ubuntu/Debian)
      - name: Install curl & jq in job container
        run: |
          if ! command -v curl >/dev/null 2>&1 || ! command -v jq >/dev/null 2>&1; then
            apt-get update -y
            DEBIAN_FRONTEND=noninteractive apt-get install -y curl jq
          fi

      - name: Wait for Selenium service (robust)
        run: |
          set -euo pipefail
          ATTEMPTS=120
          for i in $(seq 1 $ATTEMPTS); do
            # Essaye /status (Selenium 4) puis /wd/hub/status (compat)
            if curl -fsS http://selenium:4444/status | jq -e '.ready == true' >/dev/null 2>&1; then
              echo "Selenium ready via /status"; exit 0
            fi
            if curl -fsS http://selenium:4444/wd/hub/status | jq -e '.value.ready == true' >/dev/null 2>&1; then
              echo "Selenium ready via /wd/hub/status"; exit 0
            fi
            echo "Waiting Selenium... ($i/$ATTEMPTS)"
            sleep 2
          done
          echo "Selenium did not become ready in time."
          exit 1

      - name: Wait for web service (docroot check)
        run: |
          set -euo pipefail
          ATTEMPTS=60
          for i in $(seq 1 $ATTEMPTS); do
            if curl -fsS http://web/ >/dev/null 2>&1; then
              echo "Web ready"; exit 0
            fi
            echo "Waiting Web... ($i/$ATTEMPTS)"
            sleep 2
          done
          echo "Web did not become ready in time."
          exit 1

      # ðŸ”Ž VÃ©rification demandÃ©e (pipe exact)
      - name: Verify FeatureContext autoload
        run: |
          php -r 'require "vendor/autoload.php"; echo (class_exists("App\\Tests\\Behat\\FeatureContext") ? "OK": "MISSING"), PHP_EOL;'

      - name: Run Behat (profil CI)
        run: vendor/bin/behat -c behat.yml -p ci --colors --strict

      # Diagnostics automatiques en cas d'Ã©chec (logs services)
      - name: Dump Selenium logs on failure
        if: failure()
        run: |
          echo "=== Selenium logs ==="
          # Affiche les logs du service selenium
          docker logs "$(docker ps -aqf "name=selenium")" || true
      - name: Dump Web logs on failure
        if: failure()
        run: |
          echo "=== Apache access/error logs (if available) ==="
          docker exec "$(docker ps -aqf "name=web")" bash -lc 'tail -n 200 /var/log/apache2/error.log 2>/dev/null || true; tail -n 200 /var/log/apache2/access.log 2>/dev/null || true' || true

  deploy:
    name: DÃ©ploiement (Ã  adapter selon lâ€™environnement)
    runs-on: ubuntu-latest
    needs: [phpunit-and-lint, behat]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up SSH for private deploy
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer

      - name: Composer install for deploy (no dev)
        run: composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader

      - name: Build theme assets (si thÃ¨me custom existe)
        working-directory: web/themes/custom
        run: |
          if [ -f package.json ]; then npm ci && npm run build; else echo "No theme build"; fi

      - name: Push sur le repo de production
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub CI"
          git remote add production ${{ secrets.PRODUCTION_SSH_REPO }}
          git push production main:main --force-with-lease

      - name: Run Drush post-deploy
        env:
          PROD_SSH: ${{ secrets.PROD_SSH }}
        run: |
          ssh -o StrictHostKeyChecking=no "$PROD_SSH" \
            "cd web && vendor/bin/drush cim -y && vendor/bin/drush updb -y && vendor/bin/drush cr"
