name: CI/CD Drupal 11 – crypto

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash

env:
  COMPOSER_PROCESS_TIMEOUT: 1200
  COMPOSER_MEMORY_LIMIT: -1

jobs:
  phpunit-and-lint:
    name: PhpUnit & lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Mark workspace safe for git
        run: git config --global --add safe.directory "${{ github.workspace }}"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: xml, gd, mysqli, zip, gmp, sqlite, pdo_sqlite
          coverage: none
          tools: composer

      - name: Show loaded PHP modules (debug)
        run: |
          php -v
          php -m | sort | head -n 200

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install project dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: Prepare Drupal test output directories
        run: |
          mkdir -p web/sites/simpletest/browser_output
          chmod -R 775 web/sites/simpletest

      - name: Ensure run-tests.sh is executable
        run: test -f scripts/run-tests.sh && chmod +x scripts/run-tests.sh || true

      - name: Add vendor/bin to PATH
        run: echo "${GITHUB_WORKSPACE}/vendor/bin" >> "$GITHUB_PATH"

      - name: Run GrumPHP (lint + static analysis + PHPUnit)
        env:
          SIMPLETEST_BASE_URL: http://127.0.0.1:8080
          SIMPLETEST_DB: sqlite://localhost/web/sites/default/files/.ht.sqlite
          BROWSERTEST_OUTPUT_DIRECTORY: web/sites/simpletest/browser_output
        run: grumphp run

  behat:
    name: Behat end-to-end tests (runner + MariaDB + Selenium)
    runs-on: ubuntu-latest

    services:
      db:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: ci_crypto
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -uroot -proot --silent"
          --health-interval=5s --health-timeout=5s --health-retries=30
      selenium:
        image: selenium/standalone-chrome:4.30.0
        ports:
          - 4444:4444
        options: >-
          --shm-size="2g"
          --health-cmd="bash -lc 'curl -fsS http://localhost:4444/status | grep -q \"\\\"ready\\\"[[:space:]]*:[[:space:]]*true\" || curl -fsS http://localhost:4444/wd/hub/status | grep -q \"\\\"ready\\\"[[:space:]]*:[[:space:]]*true\"'"
          --health-interval=5s --health-timeout=5s --health-retries=30

    steps:
      - uses: actions/checkout@v4

      - name: Mark workspace safe
        run: git config --global --add safe.directory "${{ github.workspace }}"

      - name: Setup PHP (host)
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: gd, zip, gmp, mbstring, curl, mysqli, pdo_mysql
          coverage: none
          tools: composer

      - name: Cache Composer (host)
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dev dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: Add vendor/bin to PATH
        run: echo "${GITHUB_WORKSPACE}/vendor/bin" >> "$GITHUB_PATH"

      - name: Install MariaDB client (host)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y mariadb-client

      - name: Wait for MariaDB service
        run: |
          for i in {1..60}; do
            if mysqladmin ping -h127.0.0.1 -P3306 -uroot -proot --silent; then
              echo "MariaDB is ready"; exit 0
            fi
            echo "Waiting MariaDB... ($i/60)"; sleep 2
          done
          echo "MariaDB not ready in time"; exit 1

      - name: Prepare Drupal settings.php (MySQL)
        run: |
          set -e
          cp web/sites/default/default.settings.php web/sites/default/settings.php
          cat >> web/sites/default/settings.php <<'PHP'
  $databases['default']['default'] = [
  'driver' => 'mysql',
  'database' => 'ci_crypto',
  'username' => 'root',
  'password' => 'root',
  'host' => '127.0.0.1',
  'port' => '3306',
  'prefix' => '',
  'namespace' => 'Drupal\\mysql\\Driver\\Database\\mysql',
  'collation' => 'utf8mb4_general_ci',
];
  $settings['hash_salt'] = 'ci-auto-generated-salt';
  PHP
  mkdir -p web/sites/default/files
  chmod -R 777 web/sites/default/files

- name: Install Drupal (MySQL) via Drush
  working-directory: web
  run: |
    set -e
    ../vendor/bin/drush si minimal -y --db-url=mysql://root:root@127.0.0.1:3306/ci_crypto --site-name="CI Crypto" --account-name=admin --account-pass=admin
    ../vendor/bin/drush cr
    ../vendor/bin/drush cset system.site page.front /user/login -y
    ../vendor/bin/drush cr
    ../vendor/bin/drush status

- name: Start PHP built-in server (Drupal router)
  run: |
    nohup php -d display_errors=1 -S 127.0.0.1:8081 -t web web/core/scripts/router.php >/dev/null 2>&1 &
    for i in {1..60}; do
      CODE=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8081/user/login || true)
      if [ -n "$CODE" ] && [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]; then
        echo "/user/login HTTP $CODE"; break
      fi
      echo "Waiting /user/login (HTTP ${CODE:-none})... ($i/60)"; sleep 2
    done
    for i in {1..60}; do
      CODE=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8081/ || true)
      if [ -n "$CODE" ] && [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]; then
        echo "/ HTTP $CODE"; break
      fi
      echo "Waiting / (HTTP ${CODE:-none})... ($i/60)"; sleep 2
    done

- name: Verify Selenium health
  run: |
    for i in {1..120}; do
      if curl -fsS http://127.0.0.1:4444/status | grep -q "\"ready\"[[:space:]]*:[[:space:]]*true"; then
        echo "Selenium ready via /status"; exit 0
      fi
      if curl -fsS http://127.0.0.1:4444/wd/hub/status | grep -q "\"ready\"[[:space:]]*:[[:space:]]*true"; then
        echo "Selenium ready via /wd/hub/status"; exit 0
      fi
      echo "Waiting Selenium... ($i/120)"; sleep 2
    done
    echo "Selenium did not become ready in time."; exit 1

- name: Verify FeatureContext autoload
  run: |
    php -r 'require "vendor/autoload.php"; echo (class_exists("App\\Tests\\Behat\\FeatureContext") ? "OK": "MISSING"), PHP_EOL;'

- name: Run Behat (profile ci)
  run: |
    timeout 15m vendor/bin/behat -c behat.yml -p ci --colors --strict -vvv

- name: Dump diagnostics on failure
  if: failure()
  working-directory: web
  run: |
    echo "=== Recent Drupal watchdog (errors) ==="
    ../vendor/bin/drush ws --severity=Error --count=50 || true
    echo "=== PHP server probe / ==="
    curl -si http://127.0.0.1:8081/ || true
    echo "=== PHP server probe /user/login ==="
    curl -si http://127.0.0.1:8081/user/login || true
    echo "=== Selenium logs ==="
    docker logs ${{ job.services.selenium.id }} || true

deploy:
  name: Déploiement (à adapter selon l’environnement)
  runs-on: ubuntu-latest
  needs: [phpunit-and-lint, behat]
  if: github.ref == 'refs/heads/main'
  steps:
    - uses: actions/checkout@v4

    - name: Set up SSH for private deploy
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: PHP & Composer
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        tools: composer

    - name: Composer install for deploy (no dev)
      run: composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader

    - name: Build theme assets (si thème custom existe)
      working-directory: web/themes/custom
      run: |
        if [ -f package.json ]; then npm ci && npm run build; else echo "No theme build"; fi

    - name: Push sur le repo de production
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub CI"
        git remote add production ${{ secrets.PRODUCTION_SSH_REPO }}
        git push production main:main --force-with-lease

    - name: Run Drush post-deploy
      env:
        PROD_SSH: ${{ secrets.PROD_SSH }}
      run: |
        ssh -o StrictHostKeyChecking=no "$PROD_SSH" \
          "cd web && vendor/bin/drush cim -y && vendor/bin/drush updb -y && vendor/bin/drush cr"
