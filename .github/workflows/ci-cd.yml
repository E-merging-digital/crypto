name: CI/CD Drupal 11 – crypto

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash

env:
  COMPOSER_PROCESS_TIMEOUT: 1200
  COMPOSER_MEMORY_LIMIT: -1

jobs:
  phpunit-and-lint:
    name: PhpUnit & lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Mark workspace safe for git
        run: git config --global --add safe.directory "${{ github.workspace }}"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: xml, gd, mysqli, zip, gmp, sqlite, pdo_sqlite
          coverage: none
          tools: composer

      - name: Show loaded PHP modules (debug)
        run: |
          php -v
          php -m | sort | head -n 200

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install project dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: Prepare Drupal test output directories
        run: |
          mkdir -p web/sites/simpletest/browser_output
          chmod -R 775 web/sites/simpletest

      - name: Ensure run-tests.sh is executable
        run: test -f scripts/run-tests.sh && chmod +x scripts/run-tests.sh || true

      - name: Add vendor/bin to PATH
        run: echo "${GITHUB_WORKSPACE}/vendor/bin" >> "$GITHUB_PATH"

      - name: Run GrumPHP (lint + static analysis + PHPUnit)
        env:
          SIMPLETEST_BASE_URL: http://127.0.0.1:8080
          SIMPLETEST_DB: sqlite://localhost/web/sites/default/files/.ht.sqlite
          BROWSERTEST_OUTPUT_DIRECTORY: web/sites/simpletest/browser_output
        run: grumphp run

  behat:
    name: Behat end-to-end tests (DDEV)
    runs-on: ubuntu-latest
    needs: phpunit-and-lint
    env:
      DDEV_NONINTERACTIVE: "true"

    steps:
      - uses: actions/checkout@v4

      - name: Mark workspace safe
        run: git config --global --add safe.directory "${{ github.workspace }}"

      # Installe DDEV et Docker context pour le runner GitHub
      - name: Setup DDEV
        uses: ddev/github-action-setup-ddev@v1

      # Démarre DDEV (utilise .ddev/config.yaml de votre projet)
      - name: ddev start
        run: ddev start --omit-snapshot

      # (Optionnel mais recommandé) Installer l'add-on Selenium si non commité dans le dépôt
      - name: Ensure Selenium add-on is present
        run: |
          if [ ! -f .ddev/docker-compose.selenium-chrome.yaml ] && [ ! -f .ddev/docker-compose.selenium-chrome_extras.yaml ]; then
            ddev add-on get ddev/ddev-selenium-standalone-chrome
            ddev restart
          fi

      # Composer dans DDEV pour être 100% iso avec le conteneur web
      - name: Composer install (inside DDEV)
        run: ddev composer install --prefer-dist --no-interaction --optimize-autoloader

      # Prépare settings.php pour DDEV (utilise settings.ddev.php et/ou DB mysql "db:db@db/db")
      - name: Prepare Drupal settings.php (DDEV + MariaDB)
        run: |
          ddev exec bash -lc 'set -e
            cd web/sites/default
            cp -f default.settings.php settings.php
            {
              echo "";
              echo "// Auto-added by CI: include DDEV settings if available";
              echo "if (getenv(\"IS_DDEV_PROJECT\") && file_exists(__DIR__ . \"/settings.ddev.php\")) {";
              echo "  include __DIR__ . \"/settings.ddev.php\";";
              echo "}";
              echo "\$settings[\"hash_salt\"] = \"ci-auto-generated-salt\";";
              echo "\$settings[\"trusted_host_patterns\"][] = \"^web$\";";
            } >> settings.php
            mkdir -p ../default/files && chmod -R 777 ../default/files
          '

      # Vérifie que les fichiers scaffold sont bien présents
      - name: Check Drupal scaffold (index.php)
        run: |
          ddev exec bash -lc 'test -f web/index.php || (echo "web/index.php manquant. Vérifiez core-composer-scaffold." && exit 2)
          ls -l web/index.php'

      # Installe Drupal (MariaDB) via Drush dans DDEV
      - name: Install Drupal via Drush (DDEV MariaDB)
        run: |
          ddev exec bash -lc 'set -e
            cd web
            ../vendor/bin/drush si minimal -y --site-name="CI Crypto" --account-name=admin --account-pass=admin
            ../vendor/bin/drush cr
          '

      # Attendre que Selenium (service ddev) soit prêt
      - name: Wait for Selenium inside DDEV
        run: |
          ddev exec bash -lc 'set -e
            for i in $(seq 1 120); do
              if curl -fsS http://selenium-chrome:4444/status | jq -e ".ready == true" >/dev/null 2>&1; then
                echo "Selenium ready"; exit 0
              fi
              echo "Waiting Selenium in DDEV... ($i/120)"; sleep 2
            done
            echo "Selenium did not become ready in time." && exit 1
          '

      # Lancement de Behat *dans* le conteneur web DDEV (profil ddev)
      - name: Verify FeatureContext autoload
        run: |
          ddev exec php -r 'require "vendor/autoload.php"; echo (class_exists("App\\Tests\\Behat\\FeatureContext") ? "OK": "MISSING"), PHP_EOL;'

      - name: Run Behat (profile ddev)
        run: |
          ddev exec bash -lc 'set -e; timeout 15m vendor/bin/behat -c behat.yml -p ddev --colors --strict -vvv'

      # Logs utiles en cas d’échec
      - name: Dump Selenium logs on failure
        if: failure()
        run: ddev logs -s selenium-chrome || true

      - name: Dump Apache/PHP logs on failure
        if: failure()
        run: ddev logs -s web || true

      # Nettoyage DDEV (on laisse les artefacts de logs ci-dessus)
      - name: ddev stop
        if: always()
        run: ddev stop --omit-snapshot

  deploy:
    name: Déploiement (à adapter selon l’environnement)
    runs-on: ubuntu-latest
    needs: [phpunit-and-lint, behat]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up SSH for private deploy
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer

      - name: Composer install for deploy (no dev)
        run: composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader

      - name: Build theme assets (si thème custom existe)
        working-directory: web/themes/custom
        run: |
          if [ -f package.json ]; then npm ci && npm run build; else echo "No theme build"; fi

      - name: Push sur le repo de production
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub CI"
          git remote add production ${{ secrets.PRODUCTION_SSH_REPO }}
          git push production main:main --force-with-lease

      - name: Run Drush post-deploy
        env:
          PROD_SSH: ${{ secrets.PROD_SSH }}
        run: |
          ssh -o StrictHostKeyChecking=no "$PROD_SSH" \
            "cd web && vendor/bin/drush cim -y && vendor/bin/drush updb -y && vendor/bin/drush cr"
